
@import play.api.libs.json.{JsArray, JsDefined, JsLookupResult, JsObject, JsUndefined, JsValue, Json}
@import scala.math.BigDecimal.RoundingMode

@(params: Map[String, Any])


@allItems = @{params("AllITEMS") match {
case items:String => Json.parse(items).as[List[JsObject]]
case _ => List()
}}

@isZeroCondition = @{params("TOTAL").toString().equalsIgnoreCase("Â£0.00")}

@pageHeaderNormal = @{"You have paid the tax and duty you owe for your goods"}
@pageHeaderZero = @{"You have declared your goods"}

@pageHeader = @{if(isZeroCondition)pageHeaderZero else pageHeaderNormal}

@itemList = @{ allItems.map( item => {
    val commodityDescription = (item \ "commodityDescription").as[String]toLowerCase
    val volume = item \ "volume"
    val quantity = item \ "quantity"
    val weight = item \ "weight"
    val volOrQuantityOrWeight = if (quantity.isDefined) quantity.as[String]  else if (weight.isDefined) {BigDecimal(weight.as[String]).setScale(2,RoundingMode.apply(2)) + "g of "} else (volume.as[String] + " litres")
    val itemDesc = s"$volOrQuantityOrWeight $commodityDescription"

    val goodsValue = (item \ "goodsValue").as[String]
    val valueCurrency = (item \ "valueCurrency").as[String]
    val localValue = s"$goodsValue $valueCurrency"

    val originCountry = (item \ "originCountry").as[String]

    val exciseGBP = (item \ "exciseGBP").as[String]
    val customsGBP = (item \ "customsGBP").as[String]
    val vatGBP = (item \ "vatGBP").as[String]
    val itemTaxRaw = BigDecimal(exciseGBP) + BigDecimal(customsGBP) + BigDecimal(vatGBP)
    val itemTax = itemTaxRaw.setScale(2,RoundingMode.apply(2))

    (itemDesc,localValue,originCountry,itemTax)
    })
}

@pageHeader

When you arrive in the UK, go to the green 'nothing to declare' channel if these are the only items you are declaring. If asked, show your receipt on your mobile phone or tablet to a member of Border Force, or provide your reference number.

Your details

Name: @params("NAME")

Place of arrival in UK: @params("PLACEOFARRIVAL")
Date of arrival: @params("DATEOFARRIVAL")
Time of arrival: @params("TIMEOFARRIVAL")
@if(!isZeroCondition) {
Date of payment: @params("DATE")
}
Payment reference: @params("REFERENCE")
Amount paid: @params("TOTAL")

Items declared:


@for((itemDesc,localValue,originCountry,itemTax) <- itemList) {
- Item: @itemDesc, Price: @localValue, Purchased In: @originCountry, Tax Paid:@itemTax
}

Total: @params("TOTAL")

Payment breakdown:

Type of tax or duty:Amount paid
Customs: @params("TOTALCUSTOMSGBP")
Excise: @params("TOTALEXCISEGBP")
VAT: @params("TOTALVATGBP")

Total: @params("TOTAL")

@if(isZeroCondition) {
Tax or duty was either not due on these goods or was paid when the goods were purchased.
}

Amending your declaration:

From February 2021, you will be able to use the online service to add goods to an existing declaration.

If you have goods to declare, go to the red 'goods to declare' channel or use the red-point phone at your arrival location.

If you need to remove goods from your declaration and request a refund, visit GOV.UK and search for 'HMRC customs debt'.

From HMRC Online Service for Passengers
